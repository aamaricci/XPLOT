#!/usr/bin/perl
use File::Basename;
use File::Temp;
use File::Spec;

$home = $ENV{HOME};
$login=getpwuid($<);
$tmpdir="/tmp/";
$ran=int(rand(100));
$cfgfile= "$home/.grace/gracerc.user";
$fbatch= $tmpdir."xgbatch.".$ran.".".$login  ; #$new File::Temp( UNLINK => 1, DIR=> $home);

sub count_mblock{
    my $array=$_[0];
    my $count=1;
    open(FIN, "$array");
    foreach $line (<FIN>) {
	if( $line =~ /^\s*$/ ) {
	    $count++;
	};
    };
    close(FIN);
    undef $var;
    if($count>1){$var=1;};
    return $var;
};


$stdin = -t STDIN; 
if ($stdin ne "1"){
    my $fdata = $tmpdir . "xgstdin." . $login ; #new File::Temp( UNLINK => 1, DIR=> $home);
    open(G, ">" . $fdata);
    while (<STDIN>) { print G $_; }
    close(G);
    $ARGV[$#ARGV + 1] = $fdata;
}



open(FBATCH, ">" . $fbatch);
print FBATCH "autoscale\n";
$noautoscale=1;
$prog0 = "xmgrace ";
$prog1 = "-free ";
$prog2 = "-param $cfgfile ";
$progB = "-batch $fbatch ";
$progN = "";
$prog  = "";
$with = "l";
$lcount=-1;
$i = 0;


foreach $f (@ARGV){		# over all arguments
    $i++;

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-h") { # print help
	print "***************************** PLOT ******************************\n";
	print "**                      XmGrace from command-line              **\n";
	print "**                      Adriano Amaricci 2012-13               **\n";
	print "*****************************************************************\n";
	print "\n";
	print "[... |] xplot [options] [files]\n" ;
	print "Options:   -x<min:max>   x-interval    -x0:10\n";
	print "           -y<min:max>   y-interval    -y-2.5:0.75\n";
	print "           -lx           x log-scale \n";
	print "           -ly           y log-scale \n";
	print "           -lw           line width \n";
	print "           -u<C1:C2,>    x,y columns   -u1:3; -u1:2,1:3; -uall; -uone\n";
	print "           -m            set fixed window format (default free)\n";
	print "           -show         print cmd line on std.out\n";
	print "           -s<file>     save output to file.agr\n";
	print "           -t<string>   set title\n";
	print "           -xt<string>  set x-label\n";
	print "           -yt<string>  set y-label\n";
	print "           -l           legend on\n";
	print "           -k           y-axis stride for data sets\n";
	print "           -d           legend on using directories\n";
	print "           -w<l,p,lp>   set line type:line,points\n";
	print "           -h           this help\n";
	print "\n";
	print "Examples:  plot data\n";
	print "           plot -u1:3 -x-1:1 data.1* -u1:2  data.0\n";
	print "           cat data | plot -uall\n";
	exit;
    }  ;

#--------------------------------------------------------------------
    if (substr($f, 0, 5) eq "-show"){ # show cmd line
	$ishow=1;
	next;
    };

#--------------------------------------------------------------------
    if (substr($f,0,2) eq "-m"){ # standard format
	$prog1 = " ";
	$range = substr($f, 2);
	@parts = split(/:/,$range);
	if(@parts){
	$w=@parts[0];
	$h=@parts[1];
	$prog1 = "-fixed $w $h ";
	}
	next;
    };


#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-s") { # -s save to agr file
	$fullname = substr($f, 2);
	($file,$dir,$ext) = fileparse($fullname, qr/\.[^.]*/);
	$progN .="-saveall $dir$file.agr ";
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-k"){#add a stride to data with increasing order
	$addshift=1;
	$shift=substr($f,2);
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-lx") { # -lt set log scale on x-axis
	print FBATCH "xaxes scale logarithmic\n";
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-ly") { # -lt set log scale on y-axis
	print FBATCH "yaxes scale logarithmic\n";
	next;
    };


#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-t") { # -t add title
	$title=substr($f,2);
	print FBATCH "subtitle \"$title\"\n";
	print FBATCH "subtitle color 15\n";
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-xt") { # -xt set the x-axes labels
	$label=substr($f,3);
	print FBATCH "xaxis label \"$label\"\n";
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-yt") { # -yt set the y-axes labels
	$label=substr($f,3);
	print FBATCH "yaxis label \"$label\"\n";
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-lw"){ # this sets linewidth
	$linewidth = substr($f, 3);
	next; 
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 3) eq "-l") { # add legend to the plot
	$addlegend=1;
	$dirlegend=0;
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-d") { # use directory rather filenames in legend
	$addlegend=1;
	$dirlegend=1;
	$ndir = substr($f, 2);
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-w"){ # this sets plotting style, for example
	$with = substr($f, 2); # -wl plots with lines, -wlp with lines and points
	next; # -wsteps with steps. Here any gnuplot command can be used
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-x"){ # x-range can be set here
	$xr = substr($f, 2);
	@parts = split(/:/,$xr);	    	
	$xmin=@parts[0];
	$xmax=@parts[1];
	print FBATCH "world xmin $xmin\n";
	print FBATCH "world xmax $xmax\n";
	$noautoscale=0;
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-y"){ # y-range
	$yr = substr($f, 2);
	$autoscaley="";
	@parts = split(/:/,$yr);	    	
	$ymin=@parts[0];
	$ymax=@parts[1];
	print FBATCH "world ymin $ymin\n";
	print FBATCH "world ymax $ymax\n";
	$noautoscale=0;
	next;
    };

#--------------------------------------------------------------------
    if (substr($f, 0, 2) eq "-u"){ # this sets which columns will be plotted 
	$using = substr($f, 2);	   # example of usage -u1:2,1:3,1:5
	if ($using eq "all"){ # -uall means -u1:2,....1:n where n is number of all columns
	    $all = "1";
	}
	elsif($using eq "one"){
	    $nobatch=1;
	    $#uss=-1;
	}
	else{
	    $all = "0";
	    $_ = $using;
	    $#uss=-1;
	    while (/([0-9]+(:[0-9]+)+)/g){
		$uss[++$#uss] = "$1";
	    }
	}
	next;
    } 

#--------------------------------------------------------------------
# in case  all is 1, all columns in a file are plotted, equivalent to -u1:2,1:3,...,1:n
    if ($all eq "1"){ 
	open (G, "<$f");
	while (<G>){
	    if(/^[ |\t]*\#/) {next;}
	    @temp = split(' ', $_);
	    $nall = $#temp + 1;
	    last;
	}
	close (G);
	$#uss=-1;
	for ($j=2; $j<=$nall; $j++){
	    $uss[++$#uss] = "1:$j"; 
	}
    }


#--------------------------------------------------------------------
    if ($#uss<0) {$uss[0]="1:2";}
    for ($j = 0; $j <= $#uss; $j++){

	undef $mblock;
	$mblock=count_mblock($f);

	#if multiblock file loop over blocks:
	if ($mblock){
	    my $line;
	    my $fcount=0;
	    my $outf=$tmpdir . "output."; 
	    @foname[$fcount]=$outf.$fcount;
	    open(FOUT, ">".@foname[$fcount]);
	    open(FIN, "$f");
	    foreach $line (<FIN>) {	# for each line
		if( $line =~/^\s*$/ ) { # check if blank line
		    $fcount++;	# increment encountered blank lines
		    @foname[$fcount]=$outf.$fcount;
		    close(FOUT);
		    open(FOUT, ">".@foname[$fcount]);
		};
		print FOUT $line;
	    };
	    close FOUT;
	    close FIN;

	    #foreach $fo (@foname){
	    for ($ii=0;$ii<=$#foname; $ii++){
		$fo=@foname[$ii];
		$lcount++;
		$symbol=(1+$lcount) % 10 ;		
		if ($addlegend){
		    $fname=basename($f);
		    if ($dirlegend){
			$fname=dirname($f);
			if ($ndir) {
			    @dirs = File::Spec->splitdir( $fname );
			    $fname="";
			    for ($jj=1; $jj<=$ndir; $jj++){
				$fname.=$dirs[$jj-1];
				if($jj>1 and $jj<$ndir){$fname.="/"}
			    };
			};
			if( $ndir >= $#dirs+1){
			    $fname=dirname($f);
			};
		    };
		    print FBATCH "S$lcount legend \"$fname.$ii $uss[$j]\" \n";
		};
		if ($with eq "l"){	    
		    print FBATCH "S$lcount line type 1\n";
		    print FBATCH "S$lcount symbol 0\n";
		};
		if ($with eq "p"){
		    print FBATCH "S$lcount line type 0\n";
		    print FBATCH "S$lcount symbol $symbol\n";
		};
		if ($with eq "lp"){
		    print FBATCH "S$lcount line type 1\n";
		    print FBATCH "S$lcount symbol $symbol\n";
		};
		if ($linewidth) {
		    print FBATCH "S$lcount linewidth $linewidth\n";
		};
		if ($addshift) {
		    print FBATCH "S$lcount.y = S$lcount.y + $shift*$lcount\n";
		};
		if($nobatch){$prog .= "\"$fo\"";}else{$prog .= "-block \"$fo\" -bxy $uss[$j] ";};
	    };

	}else{
	    $lcount++;
	    $symbol=(1+$lcount) % 10 ;
	    if ($addlegend){
		$fname=basename($f);
		if ($dirlegend){
		    $fname=dirname($f);
		    if ($ndir) {
			@dirs = File::Spec->splitdir( $fname );
			$fname="";
			for ($jj=1; $jj<=$ndir; $jj++){
			    $fname.=$dirs[$jj-1];
			    if($jj>1 and $jj<$ndir){$fname.="/"}
			};
		    };
		    if( $ndir >= $#dirs+1) {
			$fname=dirname($f);
		    };
		};
		print FBATCH "S$lcount legend \"$fname $uss[$j]\" \n";
	    };	
	    if ($with eq "l"){	    
		print FBATCH "S$lcount line type 1\n";
		print FBATCH "S$lcount symbol 0\n";
	    };
	    if ($with eq "p"){
		print FBATCH "S$lcount line type 0\n";
		print FBATCH "S$lcount symbol $symbol\n";
	    };
	    if ($with eq "lp"){
		print FBATCH "S$lcount line type 1\n";
		print FBATCH "S$lcount symbol $symbol\n";
	    };
	    if ($linewidth) {
		print FBATCH "S$lcount linewidth $linewidth\n";
	    };
	    if ($addshift) {
		print FBATCH "S$lcount.y = S$lcount.y + $shift*$lcount\n";
	    };
	    if($nobatch){$prog .= "\"$f\"";}else{$prog .= "-block \"$f\" -bxy $uss[$j] ";};
	    #$prog .= "-block \"$f\" -bxy $uss[$j] ";
	};


	($j != $#uss) && ($prog .= " "); # add spaces
	if ($i <= $#ARGV){
	    $prog .= " ";
	};
    };			  
};# end the main loop over arguments and files

#Build up the cmd line:
#--------------------------------------------------------------------
if($nobatch){
    $prog = $prog0 . $prog2 . $prog1 . $prog . $progN;
}else{
    $prog = $prog0 . $prog2 . $prog1 . $progB . $prog . $progN;
}

if ($noautoscale) {print FBATCH "autoscale\n";}
if ($addlegend){
    print FBATCH "LEGEND BOX FILL COLOR 0\n";
    print FBATCH "LEGEND BOX FILL PATTERN 0\n";
    print FBATCH "LEGEND BOX LINESTYLE 0\n";
    print FBATCH "LEGEND X1 0.3 \n";
    print FBATCH "LEGEND Y1 0.9\n";
}
print FBATCH "autoticks\n";
close(FBATCH);

if ($ishow){
    print $prog."\n";
    open(FILE, $fbatch);
    while (<FILE>){
	chomp;
	print "$_\n";
    };
    close(FILE)
};

system("$prog ");
foreach $fo (@foname){
    unlink $fo ;
};
unlink $fbatch;
exit;
